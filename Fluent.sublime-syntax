%YAML 1.2
---
name: Fluent
file_extensions: [ftl]
scope: source.fluent

variables:
  identifier: '[A-Za-z][A-Za-z0-9_-]*'
  number: -?[0-9]+(?:\.[0-9]*)?
  new_entry_start: ^(?=[A-Za-z-])

# We treat many illegal constructs as valid to avoid disturbing the user while he is typing.
contexts:
  # Fluent's grammar is quite strict about where comments can be placed, but we allow them
  # almost everywhere, since otherwise we're not able to test our syntax definition.
  prototype:
  # Order matters.
  - match: ^(###)([^ \n]?).*
    scope: comment.line.number-sign.resource.fluent
    captures:
      1: punctuation.definition.comment.fluent
      2: invalid.illegal.space-required.fluent
  - match: ^(##)([^ \n]?).*
    scope: comment.line.number-sign.group.fluent
    captures:
      1: punctuation.definition.comment.fluent
      2: invalid.illegal.space-required.fluent
  - match: ^(#)([^ \n]?).*
    scope: comment.line.number-sign.fluent
    captures:
      1: punctuation.definition.comment.fluent
      2: invalid.illegal.space-required.fluent

  main:
  - include: messages
  - include: terms
  - match: (.).*
    captures:
      1: invalid.illegal.fluent

  #
  # Messages, terms, and their attributes.
  #
  messages:
  - match: ^({{identifier}}) *(=) *
    captures:
      1: entity.name.message.fluent
      2: keyword.operator.assignment.fluent
    push: [message-contents, pattern]
  - match: ^({{identifier}}) *((.).*)?
    captures:
      1: entity.name.message.fluent
      2: string.unquoted.fluent
      3: invalid.illegal.fluent
    push: [message-contents, illegal-pattern]

  terms:
  - match: ^(-(?:{{identifier}})?) *(=) *
    captures:
      1: entity.name.term.fluent
      2: keyword.operator.assignment.fluent
    push: [term-contents, pattern]
  - match: ^(-(?:{{identifier}})?) *((.).*)?
    captures:
      1: entity.name.term.fluent
      2: string.unquoted.fluent
      3: invalid.illegal.fluent
    push: [term-contents, illegal-pattern]

  attributes:
  - match: (\.)({{identifier}})? *(=) *
    captures:
      1: punctuation.accessor.dot.fluent
      2: entity.name.attribute.fluent
      3: keyword.operator.assignment.fluent
    push: [attribute-contents, pattern]
  - match: (\.)({{identifier}})? *((.).*)?
    captures:
      1: punctuation.accessor.dot.fluent
      2: entity.name.attribute.fluent
      3: string.unquoted.fluent
      4: invalid.illegal.fluent
    push: [attribute-contents, illegal-pattern]
  - match: ''
    pop: true

  message-contents:
  - meta_scope: meta.message.fluent
  - meta_include_prototype: false
  - include: attributes

  term-contents:
  - meta_scope: meta.term.fluent
  - meta_include_prototype: false
  - include: attributes

  attribute-contents:
  - meta_scope: meta.attribute.fluent
  - meta_include_prototype: false
  - match: ''
    pop: true

  #
  # Patterns.
  #
  pattern:
  - meta_content_scope: string.unquoted.fluent
  - match: \{
    scope: punctuation.section.interpolation.begin.fluent
    push: [top-level-placeable-contents, attribute-accessor, inline-expression]
  - match: ^(?![ \n])
    pop: true
  - match: \}
    scope: invalid.illegal.unpaired-brace.fluent
  - match: $
    set:
    - include: pattern-tabs
    - match: (?=[\[*.}])
      pop: true
    - match: (?=[^ \n])
      set: pattern

  illegal-pattern:
  - include: pattern-tabs
  - match: ^(?![ \n{])|(?=\.)
    pop: true
  - match: ([^ \n]).*
    scope: string.unquoted.fluent
    captures:
      1: invalid.illegal.fluent

  pattern-tabs:
  - match: ^\t+
    scope: invalid.illegal.tab.fluent

  #
  # Placeables.
  #
  placeable:
  - match: \{
    scope: punctuation.section.interpolation.begin.fluent
    set: [placeable-contents, attribute-accessor, inline-expression]

  inline-expression:
  - include: number-literal
  - include: string-literal
  - include: variable-reference
  - include: function-reference
  - include: message-reference
  - include: term-reference
  - include: placeable
  - match: (?=[)}])
    pop: true
  - match: '[^ \n]'
    scope: invalid.illegal.fluent

  attribute-accessor:
  - meta_include_prototype: false
  - match: (?:(\.)({{identifier}})?)? # No spaces are allowed before a dot.
    captures:
      1: punctuation.accessor.dot.fluent
      2: variable.other.member.fluent
    set:
    - match: \(
      scope: punctuation.section.parens.begin.fluent
      set: [inline-expression-postfix, positional-argument-value]
    - match: (?=[^ \n])
      set: inline-expression-postfix

  inline-expression-postfix:
  - match: (\.)({{identifier}})?
    captures:
      1: punctuation.accessor.dot.fluent invalid.illegal.fluent
      2: variable.other.member.fluent
  - match: \(
    scope: punctuation.section.parens.begin.fluent invalid.illegal.fluent
    push: positional-argument-value
  - match: (?=[^ \n])
    pop: true

  top-level-placeable-contents:
  - clear_scopes: 1 # Remove `string.unquoted`.
  - meta_scope: meta.interpolation.fluent
  - meta_content_scope: source.fluent.embedded
  - include: placeable-contents

  placeable-contents:
  - meta_scope: meta.interpolation.fluent
  - meta_content_scope: source.fluent.embedded
  - match: \}
    scope: punctuation.section.interpolation.end.fluent
    pop: true
  - match: \{
    scope: punctuation.section.interpolation.begin.fluent invalid.illegal.fluent
    push: [placeable-contents, attribute-accessor, inline-expression]
  - match: |-
      (?x)
      (?:(->) | (>)) # Selection operator.
      \ *
      (?:
        ([^ \n}]) [^\n}]* # Invalid part (a newline is required after an arrow).
      )?
    captures:
      1: keyword.operator.select.fluent
      2: invalid.illegal.fluent
      3: invalid.illegal.fluent
    push: variant-list
  - match: '- *(?:$|(?=\}))' # The user starts typing an arrow.
  - match: '{{new_entry_start}}'
    pop: true
  - match: '[^ \n]'
    scope: invalid.illegal.fluent
    push: [attribute-accessor, inline-expression]

  #
  # Inline expressions.
  #
  number-literal:
  - match: '{{number}}'
    scope: constant.numeric.fluent
    pop: true

  string-literal:
  - match: '"'
    scope: punctuation.definition.string.begin.fluent
    set:
    - meta_scope: meta.string.fluent string.quoted.double.fluent
    - meta_include_prototype: false
    - match: '"'
      scope: punctuation.definition.string.end.fluent
      pop: true
    - # Control characters and non-characters.
      # https://github.com/projectfluent/fluent/blob/master/spec/recommendations.md
      match: |-
        (?x)
        (\\) (?:
          (?:u | U00) (?i:
            00 (?:
              0[0-8BCEF] # Except '\t', '\n', and '\r'.
            | 7F
            | [189][0-9A-F]
            )
          | D[89A-F] [0-9A-F]{2} # Surrogates.
          | FD[DE][0-9A-F]
          )
        | U (?i:
            (?:0[1-9A-F] | 10) FFF[EF]
          | 1[1-9A-F] [0-9A-F]{4}
          | [2-9A-F] [0-9A-F]{5}
          )
        )
      scope: invalid.deprecated.character.escape.fluent
      captures:
        1: meta.escape-backslash.fluent
    - match: (\\)(?:[\\"]|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{6})
      scope: constant.character.escape.fluent
      captures:
        1: meta.escape-backslash.fluent
    - match: (\\)(?:[uU][A-Fa-f0-9]*|.?)
      scope: invalid.illegal.character.escape.fluent
      captures:
        1: meta.escape-backslash.fluent
    - match: \n
      scope: invalid.illegal.unclosed-string.fluent
      pop: true

  variable-reference:
  - match: (\$)(?:{{identifier}})?
    scope: variable.other.fluent
    captures:
      1: punctuation.definition.variable.fluent
    pop: true

  function-reference:
  - match: ([A-Z][A-Z0-9_-]*) *(\()
    captures:
      1: variable.function.fluent
      2: punctuation.section.parens.begin.fluent
    set: positional-argument-value
  - match: \( # A function call without a function name.
    scope: punctuation.section.parens.begin.fluent invalid.illegal.fluent
    set: positional-argument-value

  message-reference:
  - match: '{{identifier}}'
    scope: variable.other.fluent
    pop: true

  term-reference:
  - match: -(?:{{identifier}})?
    scope: variable.other.constant.fluent
    pop: true

  #
  # Function calls.
  #
  expression-tabs:
  - match: \t
    scope: invalid.illegal.tab.fluent

  argument-colon:
  - match: ':'
    scope: punctuation.separator.fluent
    set: named-argument-value

  closing-paren:
  - match: \)
    scope: punctuation.section.parens.end.fluent
    pop: true

  positional-argument-value:
  - include: closing-paren
  - match: ({{identifier}}) *(:) # Named argument.
    captures:
      1: variable.parameter.fluent
      2: punctuation.separator.fluent
    set: named-argument-value
  - match: ',' # Multiple commas in a row.
    scope: punctuation.separator.fluent
  - match: \}
    scope: invalid.illegal.fluent
  - include: expression-tabs
  - match: (?=[^ \n])
    set: [positional-argument-comma, attribute-accessor, inline-expression]

  positional-argument-comma:
  - match: ','
    scope: punctuation.separator.fluent
    set: positional-argument-value
  - include: closing-paren
  - include: argument-colon # There was a line break between an argument name and a colon.
  - include: expression-tabs
  - match: '[^ \n]'
    scope: invalid.illegal.fluent
    set: positional-argument-value

  named-argument-value:
  - include: closing-paren # Named argument without value.
  - match: ',' # Named argument without value.
    scope: punctuation.separator.fluent
    set: named-argument-key
  - match: '[:}]'
    scope: invalid.illegal.fluent
  - include: expression-tabs
  - match: (?=[^ \n])
    set: [named-argument-comma, attribute-accessor, inline-expression]

  named-argument-comma:
  - match: ','
    scope: punctuation.separator.fluent
    set: named-argument-key
  - include: closing-paren
  - include: expression-tabs
  - match: '[^ \n]'
    scope: invalid.illegal.fluent
    set: named-argument-value

  named-argument-key:
  - match: '{{identifier}}'
    scope: variable.parameter.fluent
    set:
    - include: argument-colon
    - include: named-argument-comma
  - include: named-argument-value

  #
  # Block expressions.
  #
  variant-list:
  - meta_content_scope: meta.variant-list.fluent
  - match: (\*)([ \t]*)(\[)
    captures:
      1: keyword.operator.default.fluent
      2: invalid.illegal.space.fluent
      3: meta.brackets.fluent punctuation.section.brackets.begin.fluent
    set: [variant-list-no-default, variant-key]
  - match: (\*) *$ # The user starts typing a default variant.
    captures:
      1: keyword.operator.default.fluent
    set: variant-list-no-default
  - include: variant-list-common

  variant-list-no-default:
  - meta_content_scope: meta.variant-list.fluent
  - match: \*
    scope: invalid.illegal.fluent
  - include: variant-list-common

  variant-list-common:
  - match: \[
    scope: meta.brackets.fluent punctuation.section.brackets.begin.fluent
    push: variant-key
  - match: (?=\})|{{new_entry_start}}
    pop: true
  - include: pattern-tabs
  - match: ([^ \n]).*
    captures:
      1: invalid.illegal.fluent

  variant-key:
  - meta_content_scope: meta.brackets.fluent meta.variant-key.fluent
  - include: variant-key-closing-bracket
  - match: '{{identifier}}'
    scope: string.unquoted.fluent
    set: variant-key-postfix
  - match: '{{number}}|-(?!\w)'
    scope: constant.numeric.fluent
    set: variant-key-postfix
  - include: illegal-words

  variant-key-postfix:
  - meta_content_scope: meta.brackets.fluent
  - include: variant-key-closing-bracket
  - include: illegal-words

  illegal-words:
  - match: ([\w-])[\w-]*
    captures:
      1: invalid.illegal.fluent
  - match: '[^ \n]'
    scope: invalid.illegal.fluent

  variant-key-closing-bracket:
  - match: \]
    scope: punctuation.section.brackets.end.fluent
    set: # Spaces after the bracket should have neither `meta.brackets` nor `string.unquoted`.
    - meta_include_prototype: false
    - match: (?! )
      set: pattern
